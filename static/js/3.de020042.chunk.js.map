{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","src","alt","descriptionBlock","photos","large","userId","fullName","Preloader","Post","item","message","likeCount","MyPosts","React","memo","postsElements","posts","map","p","id","myPostsBlock","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","AddNewPostForm","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","reduxForm","form","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","store","ProfileContainer","userID","this","match","params","authorizedUserID","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.de020042.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1cWOm\",\"status\":\"ProfileInfo_status__3JzBl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPostsBlock\":\"MyPosts_myPostsBlock__1tdZV\",\"posts\":\"MyPosts_posts__21cgG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3NB6D\"};","import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => { \r\n        setStatus(props.status)\r\n     }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus( e.currentTarget.value )\r\n    }\r\n\r\n    return (\r\n        <div className={s.status}>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={ activateEditMode }>{props.status || \"----------\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} value={status} onBlur={deactivateEditMode}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src=\"https://klopik.com/uploads/posts/2014-01/1390504695_all-sizes-baby-raccoon-flickr-photo-sharing-1.png\" alt=\"image\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large} />\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                <p>My ID - {props.profile.userId}</p>\r\n                <p>My name - {props.profile.fullName}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://s1.1zoom.ru/big3/604/Raccoons_Closeup_Eyes_Snout_Glance_Whiskers_Nose_565212_2048x2048.jpg\" alt=\"image\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likeCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts = React.memo((props) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post message={p.message} id={p.id} likeCount={p.likeCount} key={p.id}/>)\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPostsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostForm onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                { postsElements }\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name='newPostText' validate={[required, maxLength10]}\r\n                placeholder='Post message'\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddNewPostForm = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch( addPostActionCreator(newPostText) )\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer store={props.store}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userID = this.props.match.params.userID\r\n\r\n        if (!userID) {\r\n            userID = this.props.authorizedUserID\r\n            if (!userID) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userID)\r\n        this.props.getStatus(userID)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} \r\n            profile={this.props.profile} \r\n            status={this.props.status} \r\n            updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserID: state.auth.userID,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}