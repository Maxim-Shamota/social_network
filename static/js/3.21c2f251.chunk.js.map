{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","assets/images/tenor.gif","assets/images/enotic.png","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","isOwner","savePhoto","Preloader","src","mainPhoto","alt","descriptionBlock","mainAvatarWrapper","photos","large","usersAvatar","mainAvatar","type","target","files","length","userId","fullName","Post","item","message","likeCount","MyPosts","React","memo","postsElements","posts","map","p","id","myPostsBlock","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","AddNewPostForm","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","reduxForm","form","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","store","ProfileContainer","userID","this","match","params","authorizedUserID","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.21c2f251.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1cWOm\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1aLeo\",\"mainAvatarWrapper\":\"ProfileInfo_mainAvatarWrapper__KKsb0\",\"mainAvatar\":\"ProfileInfo_mainAvatar__33bKD\",\"status\":\"ProfileInfo_status__3JzBl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPostsBlock\":\"MyPosts_myPostsBlock__1tdZV\",\"posts\":\"MyPosts_posts__21cgG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3NB6D\"};","import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => { \r\n        setStatus(props.status)\r\n     }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus( e.currentTarget.value )\r\n    }\r\n\r\n    return (\r\n        <div className={s.status}>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={ activateEditMode }>{props.status || \"----------\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} value={status} onBlur={deactivateEditMode}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","export default __webpack_public_path__ + \"static/media/tenor.35e35f4d.gif\";","export default __webpack_public_path__ + \"static/media/enotic.9b74c879.png\";","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport usersAvatar from \"../../../assets/images/tenor.gif\";\r\nimport mainPhoto from \"./../../../assets/images/enotic.png\"\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto }) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={mainPhoto} alt=\"image\" />\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.mainAvatarWrapper}>\r\n                    <img src={profile.photos.large || usersAvatar} className={s.mainAvatar} />\r\n                </div>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} className={s.status}/>\r\n                <p>My ID - {profile.userId}</p>\r\n                <p>My name - {profile.fullName}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://s1.1zoom.ru/big3/604/Raccoons_Closeup_Eyes_Snout_Glance_Whiskers_Nose_565212_2048x2048.jpg\" alt=\"image\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likeCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts = React.memo((props) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post message={p.message} id={p.id} likeCount={p.likeCount} key={p.id}/>)\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPostsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostForm onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                { postsElements }\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name='newPostText' validate={[required, maxLength10]}\r\n                placeholder='Post message'\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddNewPostForm = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch( addPostActionCreator(newPostText) )\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}/>\r\n            <MyPostsContainer store={props.store}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { getStatus, getUserProfile, savePhoto, updateStatus } from \"../../redux/profileReducer\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userID = this.props.match.params.userID\r\n\r\n        if (!userID) {\r\n            userID = this.props.authorizedUserID\r\n            if (!userID) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userID)\r\n        this.props.getStatus(userID)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userID != prevProps.match.params.userID) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n            isOwner={!this.props.match.params.userId}\r\n            profile={this.props.profile}\r\n            status={this.props.status}\r\n            updateStatus={this.props.updateStatus}\r\n            savePhoto={this.props.savePhoto} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserID: state.auth.userID,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto }),\r\n    withRouter\r\n)(ProfileContainer)"],"sourceRoot":""}